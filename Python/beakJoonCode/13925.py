import sys
input = sys.stdin.readline
MOD = int(1e9) + 7

NUMBER_OF_ELEMENTS = int(input())
NUMBERS_LIST = list(map(int, input().split()))
SEGMENT_TREE = [0]*(4*NUMBER_OF_ELEMENTS+4)
LAZY_UPDATE_INFORMATION = [[1, 0] for _ in range(4*NUMBER_OF_ELEMENTS+4)]

def INITIALIZE_SEGMENT_TREE(START_INDEX = 0, END_INDEX = NUMBER_OF_ELEMENTS-1, CURRENT_NODE_INDEX = 1) :
  if START_INDEX == END_INDEX :
    SEGMENT_TREE[CURRENT_NODE_INDEX] = NUMBERS_LIST[START_INDEX]
    return
  MIDDLE_INDEX = (START_INDEX + END_INDEX) // 2
  INITIALIZE_SEGMENT_TREE(START_INDEX, MIDDLE_INDEX, CURRENT_NODE_INDEX*2)
  INITIALIZE_SEGMENT_TREE(MIDDLE_INDEX+1, END_INDEX, CURRENT_NODE_INDEX*2+1)  
  SEGMENT_TREE[CURRENT_NODE_INDEX] = SEGMENT_TREE[CURRENT_NODE_INDEX*2] + SEGMENT_TREE[CURRENT_NODE_INDEX*2+1]

def PROPAGATE_LAZY_UPDATE(START_INDEX, END_INDEX, CURRENT_NODE_INDEX) :
  if START_INDEX != END_INDEX :
    for i in range(2) :
      LAZY_UPDATE_INFORMATION[CURRENT_NODE_INDEX*2][i] = (LAZY_UPDATE_INFORMATION[CURRENT_NODE_INDEX*2][i]*LAZY_UPDATE_INFORMATION[CURRENT_NODE_INDEX][0]) % MOD
      LAZY_UPDATE_INFORMATION[CURRENT_NODE_INDEX*2+1][i] = (LAZY_UPDATE_INFORMATION[CURRENT_NODE_INDEX*2+1][i]*LAZY_UPDATE_INFORMATION[CURRENT_NODE_INDEX][0]) % MOD
    LAZY_UPDATE_INFORMATION[CURRENT_NODE_INDEX*2][1] = (LAZY_UPDATE_INFORMATION[CURRENT_NODE_INDEX*2][1] + LAZY_UPDATE_INFORMATION[CURRENT_NODE_INDEX][1]) % MOD
    LAZY_UPDATE_INFORMATION[CURRENT_NODE_INDEX*2+1][1] = (LAZY_UPDATE_INFORMATION[CURRENT_NODE_INDEX*2+1][1] + LAZY_UPDATE_INFORMATION[CURRENT_NODE_INDEX][1]) % MOD
  SEGMENT_TREE[CURRENT_NODE_INDEX] = (SEGMENT_TREE[CURRENT_NODE_INDEX] * LAZY_UPDATE_INFORMATION[CURRENT_NODE_INDEX][0]) % MOD
  SEGMENT_TREE[CURRENT_NODE_INDEX] = (SEGMENT_TREE[CURRENT_NODE_INDEX] + LAZY_UPDATE_INFORMATION[CURRENT_NODE_INDEX][1]*(END_INDEX - START_INDEX + 1)) % MOD
  LAZY_UPDATE_INFORMATION[CURRENT_NODE_INDEX][0] = 1
  LAZY_UPDATE_INFORMATION[CURRENT_NODE_INDEX][1] = 0

def UPDATE_SEGMENT_TREE(LEFT_INDEX, RIGHT_INDEX, VALUE, OPERATION_TYPE, START_INDEX = 0, END_INDEX = NUMBER_OF_ELEMENTS-1, CURRENT_NODE_INDEX = 1) :
  PROPAGATE_LAZY_UPDATE(START_INDEX, END_INDEX, CURRENT_NODE_INDEX)
  if RIGHT_INDEX < START_INDEX or LEFT_INDEX > END_INDEX :
    return
  if LEFT_INDEX <= START_INDEX <= END_INDEX <= RIGHT_INDEX :
    if OPERATION_TYPE == 1 :
      LAZY_UPDATE_INFORMATION[CURRENT_NODE_INDEX][1] = (LAZY_UPDATE_INFORMATION[CURRENT_NODE_INDEX][1] + VALUE) % MOD
    elif OPERATION_TYPE == 2 :
      LAZY_UPDATE_INFORMATION[CURRENT_NODE_INDEX][0] = (LAZY_UPDATE_INFORMATION[CURRENT_NODE_INDEX][0] * VALUE) % MOD
      LAZY_UPDATE_INFORMATION[CURRENT_NODE_INDEX][1] = (LAZY_UPDATE_INFORMATION[CURRENT_NODE_INDEX][1] * VALUE) % MOD
    else :
      LAZY_UPDATE_INFORMATION[CURRENT_NODE_INDEX][0] = 0
      LAZY_UPDATE_INFORMATION[CURRENT_NODE_INDEX][1] = VALUE
    PROPAGATE_LAZY_UPDATE(START_INDEX, END_INDEX, CURRENT_NODE_INDEX)
    return
  MIDDLE_INDEX = (START_INDEX + END_INDEX) // 2
  UPDATE_SEGMENT_TREE(LEFT_INDEX, RIGHT_INDEX, VALUE, OPERATION_TYPE, START_INDEX, MIDDLE_INDEX, CURRENT_NODE_INDEX*2)
  UPDATE_SEGMENT_TREE(LEFT_INDEX, RIGHT_INDEX, VALUE, OPERATION_TYPE, MIDDLE_INDEX+1, END_INDEX, CURRENT_NODE_INDEX*2+1)
  SEGMENT_TREE[CURRENT_NODE_INDEX] = (SEGMENT_TREE[CURRENT_NODE_INDEX*2] + SEGMENT_TREE[CURRENT_NODE_INDEX*2+1]) % MOD

def SEARCH_SEGMENT_TREE(LEFT_INDEX, RIGHT_INDEX, START_INDEX = 0, END_INDEX = NUMBER_OF_ELEMENTS-1, CURRENT_NODE_INDEX = 1) :
  PROPAGATE_LAZY_UPDATE(START_INDEX, END_INDEX, CURRENT_NODE_INDEX)
  if RIGHT_INDEX < START_INDEX or LEFT_INDEX > END_INDEX :
    return 0
  if LEFT_INDEX <= START_INDEX <= END_INDEX <= RIGHT_INDEX :
    return SEGMENT_TREE[CURRENT_NODE_INDEX] % MOD
  MIDDLE_INDEX = (START_INDEX + END_INDEX) // 2
  RESULT = 0
  RESULT = (RESULT + SEARCH_SEGMENT_TREE(LEFT_INDEX, RIGHT_INDEX, START_INDEX, MIDDLE_INDEX, CURRENT_NODE_INDEX*2)) % MOD
  RESULT = (RESULT + SEARCH_SEGMENT_TREE(LEFT_INDEX, RIGHT_INDEX, MIDDLE_INDEX+1, END_INDEX, CURRENT_NODE_INDEX*2+1)) % MOD
  return RESULT

INITIALIZE_SEGMENT_TREE()
NUMBER_OF_QUERIES = int(input())
for _ in range(NUMBER_OF_QUERIES) :
  QUERY_TYPE, *COMMAND = map(int, input().split())
  if QUERY_TYPE <= 3 :
    X, Y, VALUE = COMMAND
    UPDATE_SEGMENT_TREE(X-1, Y-1, VALUE, QUERY_TYPE)
  else :
    X, Y = COMMAND
    print(SEARCH_SEGMENT_TREE(X-1, Y-1) % MOD)
